slice_max(order_by = average_page_views, n = 10) %>%
pull(song_producers)
# Filter the main dataset to include only these top producers
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
left_join(producer_views, by = "song_producers")
# Generate plot
output$producerPlot <- renderPlotly({
p <- ggplot(filtered_data, aes(x = song_producers, y = song_page_views, fill = song_producers)) +
geom_boxplot() +
labs(title = "Distribution of Song Page Views by Top Producers",
x = "Producer", y = "Song Page Views") +
scale_fill_brewer(palette = "Paired") +  # Colorful, qualitative color palette
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
# Convert ggplot to plotly for interactivity
ggplotly(p, tooltip = c("song_producers", "formatted_views"))  # Custom tooltip with formatted views
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
# Define UI
ui <- fluidPage(
titlePanel("Interactive Boxplot of Song Page Views by Producer"),
plotlyOutput("producerPlot")  # Output for the interactive plot
)
# Define server logic
server <- function(input, output) {
# Prepare and clean data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
taylorswift <- taylorswift %>%
mutate(song_producers = strsplit(as.character(song_producers), ",")) %>%
unnest(song_producers) %>%
mutate(song_producers = gsub("[[:punct:]]", "", song_producers),  # Remove punctuation
song_producers = trimws(song_producers))  # Trim whitespace
# Aggregate to find average page views per producer, format without decimals
producer_views <- taylorswift %>%
group_by(song_producers) %>%
summarize(average_page_views = mean(song_page_views, na.rm = TRUE), .groups = 'drop') %>%
mutate(formatted_views = format(round(average_page_views, 0), big.mark = ","))  # No decimals
# Filter for top producers, e.g., top 10
top_producers <- producer_views %>%
slice_max(order_by = average_page_views, n = 10) %>%
pull(song_producers)
# Filter the main dataset to include only these top producers
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
left_join(producer_views, by = "song_producers")
# Generate plot
output$producerPlot <- renderPlotly({
p <- ggplot(filtered_data, aes(x = song_producers, y = song_page_views, fill = song_producers)) +
geom_boxplot() +
labs(title = "Distribution of Song Page Views by Top Producers",
x = "Producer", y = "Song Page Views") +
scale_fill_brewer(palette = "Paired") +  # Colorful, qualitative color palette
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
# Convert ggplot to plotly for interactivity
ggplotly(p, tooltip = c("song_producers", "formatted_views"))  # Custom tooltip with formatted views
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
# Define UI
ui <- fluidPage(
titlePanel("Interactive Boxplot of Song Page Views by Producer"),
plotlyOutput("producerPlot")  # Output for the interactive plot
)
# Define server logic
server <- function(input, output) {
# Prepare and clean data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
taylorswift <- taylorswift %>%
mutate(song_producers = strsplit(as.character(song_producers), ",")) %>%
unnest(song_producers) %>%
mutate(song_producers = gsub("[[:punct:]]", "", song_producers),  # Remove punctuation
song_producers = trimws(song_producers))  # Trim whitespace
# Aggregate to find average page views per producer, format without decimals
producer_views <- taylorswift %>%
group_by(song_producers) %>%
summarize(average_page_views = mean(song_page_views, na.rm = TRUE), .groups = 'drop') %>%
mutate(formatted_views = format(round(average_page_views, 0), big.mark = ","))  # No decimals
# Filter for top producers, e.g., top 10
top_producers <- producer_views %>%
slice_max(order_by = average_page_views, n = 10) %>%
pull(song_producers)
# Filter the main dataset to include only these top producers
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
left_join(producer_views, by = "song_producers")
# Generate plot
output$producerPlot <- renderPlotly({
p <- ggplot(filtered_data, aes(x = song_producers, y = song_page_views, fill = song_producers)) +
geom_boxplot() +
labs(title = "Distribution of Song Page Views by Top Producers",
x = "Producer", y = "Song Page Views") +
scale_fill_brewer(palette = "Paired") +  # Colorful, qualitative color palette
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), legend.position = "none")
# Convert ggplot to plotly for interactivity
ggplotly(p, tooltip = c("song_producers", "formatted_views"))  # Custom tooltip with formatted views
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(plotly)
library(dplyr)
# Define UI
ui <- fluidPage(
titlePanel("Interactive Boxplot of Song Page Views by Producer"),
plotlyOutput("producerPlot")  # Output for the interactive plot
)
# Define server logic
server <- function(input, output) {
# Prepare and clean data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
taylorswift <- taylorswift %>%
mutate(song_producers = strsplit(as.character(song_producers), ",")) %>%
unnest(song_producers) %>%
mutate(song_producers = gsub("[[:punct:]]", "", song_producers),  # Remove punctuation
song_producers = trimws(song_producers))  # Trim whitespace
# Aggregate to find average page views per producer, format without decimals
producer_views <- taylorswift %>%
group_by(song_producers) %>%
summarize(average_page_views = mean(song_page_views, na.rm = TRUE), .groups = 'drop') %>%
mutate(formatted_views = format(round(average_page_views, 0), big.mark = ","))  # No decimals
# Filter for top producers, e.g., top 10
top_producers <- producer_views %>%
slice_max(order_by = average_page_views, n = 10) %>%
pull(song_producers)
# Filter the main dataset to include only these top producers
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
left_join(producer_views, by = "song_producers")
# Generate plot
output$producerPlot <- renderPlotly({
p <- ggplot(filtered_data, aes(x = song_producers, y = song_page_views, fill = song_producers)) +
geom_boxplot() +
labs(title = "Distribution of Song Page Views by Top Producers",
x = "Producer", y = "Song Page Views") +
scale_fill_brewer(palette = "Paired") +  # Colorful, qualitative color palette
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1), legend.position = "none")
# Convert ggplot to plotly for interactivity
ggplotly(p, tooltip = c("song_producers", "formatted_views"))  # Custom tooltip with formatted views
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('shinyapp5')
library(ggplot2)
library(dplyr)
library(stringr)  # for str_detect
# Load data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
# Filter for specific albums
selected_albums <- c("Taylor Swift", "Fearless (Platinum Edition)", "Fearless (Taylor's Version)",
"Speak Now (Deluxe)", "Speak Now (Taylor's Version)",
"Red (Deluxe Version)", "Red (Taylor's Version)",
"1989 (Deluxe)", "1989 (Taylor's Version) [Tangerine Edition]",
"reputation", "Lover", "folklore (deluxe version)",
"evermore (deluxe version)", "Midnights (3am Edition)")
taylorswift <- taylorswift %>%
filter(album_title %in% selected_albums)
# Your genre tagging code
genres <- c('Country', 'Country Rock', 'American Folk', 'Folk', 'Ballad', 'Pop')
cur_col <- taylorswift$song_tags
taylorswift$Country = as.numeric(str_detect(cur_col, pattern = genres[[1]]))
taylorswift$Country_Rock = as.numeric(str_detect(cur_col, pattern = genres[[2]]))
taylorswift$American_Folk = as.numeric(str_detect(cur_col, pattern = genres[[3]]))
taylorswift$Folk = as.numeric(str_detect(cur_col, pattern = genres[[4]]))
taylorswift$Ballad = as.numeric(str_detect(cur_col, pattern = genres[[5]]))
taylorswift$Pop = as.numeric(str_detect(cur_col, pattern = genres[[6]]))
# Aggregating data for the heatmap
genre_columns <- c("Country", "Country_Rock", "American_Folk", "Folk", "Ballad", "Pop")
# Create a new dataframe for plotting
genre_data <- taylorswift %>%
select(album_title, song_page_views, all_of(genre_columns)) %>%
pivot_longer(cols = genre_columns, names_to = "Genre", values_to = "Present") %>%
filter(Present == 1) %>%
group_by(album_title, Genre) %>%
summarize(Average_Views = mean(song_page_views, na.rm = TRUE), .groups = 'drop')
# Heatmap plot
ggplot(genre_data, aes(x = album_title, y = Genre, fill = Average_Views)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Genre Popularity by Selected Albums", x = "Album", y = "Genre") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve x-axis label readability
library(ggplot2)
library(dplyr)
library(stringr)  # for str_detect
# Load data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
# Filter for specific albums
selected_albums <- c("Taylor Swift", "Fearless (Platinum Edition)", "Fearless (Taylor's Version)",
"Speak Now (Deluxe)", "Speak Now (Taylor's Version)",
"Red (Deluxe Version)", "Red (Taylor's Version)",
"1989 (Deluxe)", "1989 (Taylor's Version) [Tangerine Edition]",
"reputation", "Lover", "folklore (deluxe version)",
"evermore (deluxe version)", "Midnights (3am Edition)")
taylorswift <- taylorswift %>%
filter(album_title %in% selected_albums)
# Your genre tagging code
genres <- c('Country', 'Country Rock', 'American Folk', 'Folk', 'Ballad', 'Pop')
cur_col <- taylorswift$song_tags
taylorswift$Country = as.numeric(str_detect(cur_col, pattern = genres[[1]]))
taylorswift$Country_Rock = as.numeric(str_detect(cur_col, pattern = genres[[2]]))
taylorswift$American_Folk = as.numeric(str_detect(cur_col, pattern = genres[[3]]))
taylorswift$Folk = as.numeric(str_detect(cur_col, pattern = genres[[4]]))
taylorswift$Ballad = as.numeric(str_detect(cur_col, pattern = genres[[5]]))
taylorswift$Pop = as.numeric(str_detect(cur_col, pattern = genres[[6]]))
# Aggregating data for the heatmap
genre_columns <- c("Country", "Country_Rock", "American_Folk", "Folk", "Ballad", "Pop")
# Create a new dataframe for plotting
genre_data <- taylorswift %>%
select(album_title, song_page_views, all_of(genre_columns)) %>%
pivot_longer(cols = genre_columns, names_to = "Genre", values_to = "Present") %>%
filter(Present == 1) %>%
group_by(album_title, Genre) %>%
summarize(Average_Views = mean(song_page_views, na.rm = TRUE), .groups = 'drop')
# Heatmap plot
ggplot(genre_data, aes(x = album_title, y = Genre, fill = Average_Views)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Genre Popularity by Selected Albums", x = "Album", y = "Genre") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve x-axis label readability
library(ggplot2)
library(dplyr)
library(stringr)  # for str_detect
# Load data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
# Filter for specific albums
selected_albums <- c("Taylor Swift", "Fearless (Platinum Edition)", "Fearless (Taylor's Version)",
"Speak Now (Deluxe)", "Speak Now (Taylor's Version)",
"Red (Deluxe Version)", "Red (Taylor's Version)",
"1989 (Deluxe)", "1989 (Taylor's Version) [Tangerine Edition]",
"reputation", "Lover", "folklore (deluxe version)",
"evermore (deluxe version)", "Midnights (3am Edition)")
taylorswift <- taylorswift %>%
filter(album_title %in% selected_albums)
# Your genre tagging code
genres <- c('Country', 'Country Rock', 'American Folk', 'Folk', 'Ballad', 'Pop')
cur_col <- taylorswift$song_tags
taylorswift$Country = as.numeric(str_detect(cur_col, pattern = genres[[1]]))
taylorswift$Country_Rock = as.numeric(str_detect(cur_col, pattern = genres[[2]]))
taylorswift$American_Folk = as.numeric(str_detect(cur_col, pattern = genres[[3]]))
taylorswift$Folk = as.numeric(str_detect(cur_col, pattern = genres[[4]]))
taylorswift$Ballad = as.numeric(str_detect(cur_col, pattern = genres[[5]]))
taylorswift$Pop = as.numeric(str_detect(cur_col, pattern = genres[[6]]))
# Aggregating data for the heatmap
genre_columns <- c("Country", "Country_Rock", "American_Folk", "Folk", "Ballad", "Pop")
# Create a new dataframe for plotting
genre_data <- taylorswift %>%
select(album_title, song_page_views, all_of(genre_columns)) %>%
pivot_longer(cols = genre_columns, names_to = "Genre", values_to = "Present") %>%
filter(Present == 1) %>%
group_by(album_title, Genre) %>%
summarize(Average_Views = mean(song_page_views, na.rm = TRUE), .groups = 'drop')
# Heatmap plot
ggplot(genre_data, aes(x = album_title, y = Genre, fill = Average_Views)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Genre Popularity by Selected Albums", x = "Album", y = "Genre") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve x-axis label readability
?pivot_longer
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)  # for str_detect
# Load data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
# Filter for specific albums
selected_albums <- c("Taylor Swift", "Fearless (Platinum Edition)", "Fearless (Taylor's Version)",
"Speak Now (Deluxe)", "Speak Now (Taylor's Version)",
"Red (Deluxe Version)", "Red (Taylor's Version)",
"1989 (Deluxe)", "1989 (Taylor's Version) [Tangerine Edition]",
"reputation", "Lover", "folklore (deluxe version)",
"evermore (deluxe version)", "Midnights (3am Edition)")
taylorswift <- taylorswift %>%
filter(album_title %in% selected_albums)
# Your genre tagging code
genres <- c('Country', 'Country Rock', 'American Folk', 'Folk', 'Ballad', 'Pop')
cur_col <- taylorswift$song_tags
taylorswift$Country = as.numeric(str_detect(cur_col, pattern = genres[[1]]))
taylorswift$Country_Rock = as.numeric(str_detect(cur_col, pattern = genres[[2]]))
taylorswift$American_Folk = as.numeric(str_detect(cur_col, pattern = genres[[3]]))
taylorswift$Folk = as.numeric(str_detect(cur_col, pattern = genres[[4]]))
taylorswift$Ballad = as.numeric(str_detect(cur_col, pattern = genres[[5]]))
taylorswift$Pop = as.numeric(str_detect(cur_col, pattern = genres[[6]]))
# Aggregating data for the heatmap
genre_columns <- c("Country", "Country_Rock", "American_Folk", "Folk", "Ballad", "Pop")
# Create a new dataframe for plotting
genre_data <- taylorswift %>%
select(album_title, song_page_views, all_of(genre_columns)) %>%
pivot_longer(cols = genre_columns, names_to = "Genre", values_to = "Present") %>%
filter(Present == 1) %>%
group_by(album_title, Genre) %>%
summarize(Average_Views = mean(song_page_views, na.rm = TRUE), .groups = 'drop')
# Heatmap plot
ggplot(genre_data, aes(x = album_title, y = Genre, fill = Average_Views)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Genre Popularity by Selected Albums", x = "Album", y = "Genre") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve x-axis label readability
library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)  # for str_detect
# Load data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
# Filter for specific albums
selected_albums <- c("Taylor Swift", "Fearless (Platinum Edition)", "Fearless (Taylor's Version)",
"Speak Now (Deluxe)", "Speak Now (Taylor's Version)",
"Red (Deluxe Version)", "Red (Taylor's Version)",
"1989 (Deluxe)", "1989 (Taylor's Version) [Tangerine Edition]",
"reputation", "Lover", "folklore (deluxe version)",
"evermore (deluxe version)", "Midnights (3am Edition)")
taylorswift <- taylorswift %>%
filter(album_title %in% selected_albums)
# Your genre tagging code
genres <- c('Country', 'Country Rock', 'American Folk', 'Folk', 'Ballad', 'Pop')
cur_col <- taylorswift$song_tags
taylorswift$Country = as.numeric(str_detect(cur_col, pattern = genres[[1]]))
taylorswift$Country_Rock = as.numeric(str_detect(cur_col, pattern = genres[[2]]))
taylorswift$American_Folk = as.numeric(str_detect(cur_col, pattern = genres[[3]]))
taylorswift$Folk = as.numeric(str_detect(cur_col, pattern = genres[[4]]))
taylorswift$Ballad = as.numeric(str_detect(cur_col, pattern = genres[[5]]))
taylorswift$Pop = as.numeric(str_detect(cur_col, pattern = genres[[6]]))
# Aggregating data for the heatmap
genre_columns <- c("Country", "Country_Rock", "American_Folk", "Folk", "Ballad", "Pop")
# Create a new dataframe for plotting
genre_data <- taylorswift %>%
select(album_title, song_page_views, all_of(genre_columns)) %>%
pivot_longer(cols = genre_columns, names_to = "Genre", values_to = "Present") %>%
filter(Present == 1) %>%
group_by(album_title, Genre) %>%
summarize(Average_Views = mean(song_page_views, na.rm = TRUE), .groups = 'drop')
# Heatmap plot
ggplot(genre_data, aes(x = album_title, y = Genre, fill = Average_Views)) +
geom_tile() +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "Genre Popularity by Selected Albums", x = "Album", y = "Genre") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve x-axis label readability
runApp('shinyapp5')
runApp('shinyapp5')
library(ggplot2)
library(dplyr)
library(lubridate)  # For handling dates
# Load and prepare data
taylorswift <- read.csv("/path/to/your/taylorswift.csv")  # Adjust path as needed
library(ggplot2)
library(dplyr)
library(lubridate)  # For handling dates
# Load and prepare data
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
# Clean and process data
taylorswift <- taylorswift %>%
mutate(song_producers = strsplit(as.character(song_producers), ",")) %>%
unnest(song_producers) %>%
mutate(song_producers = gsub("[[:punct:]]", "", song_producers),  # Remove punctuation
song_producers = trimws(song_producers),  # Trim whitespace
year = year(ymd(song_release_date)))  # Extract year from the release date
# Calculate top producers
top_producers <- taylorswift %>%
group_by(song_producers) %>%
summarize(total_songs = n(), .groups = 'drop') %>%
top_n(10, total_songs) %>%
pull(song_producers)
# Filter data to include only top producers
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
group_by(year, song_producers) %>%
summarize(songs_per_year = n(), .groups = 'drop')
# Create the time series plot
p <- ggplot(filtered_data, aes(x = year, y = songs_per_year, color = song_producers, group = song_producers)) +
geom_line() +  # Use geom_line() for line plots
geom_point() +  # Add points to the line plot
labs(title = "Appearance of Top Song Producers Over the Years",
x = "Year", y = "Number of Songs Produced") +
theme_minimal() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))  # Nice axis breaks
# Display the plot
print(p)
library(ggplot2)
library(dplyr)
library(lubridate)  # Saw online that this can help to handle dates so I don't have to do it manually
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
taylorswift <- taylorswift %>%
mutate(song_producers = strsplit(as.character(song_producers), ",")) %>%
unnest(song_producers) %>%
mutate(song_producers = gsub("[[:punct:]]", "", song_producers),
song_producers = trimws(song_producers),
year = year(ymd(song_release_date)))  # Extract year from the release date using lubridate
top_producers <- taylorswift %>%
group_by(song_producers) %>%
summarize(total_songs = n(), .groups = 'drop') %>%
top_n(10, total_songs) %>%
pull(song_producers)
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
group_by(year, song_producers) %>%
summarize(songs_per_year = n(), .groups = 'drop')
lineplot <- ggplot(filtered_data, aes(x = year, y = songs_per_year, color = song_producers, group = song_producers)) +
geom_line() +  # Use geom_line() for line plots
geom_point() +  # Add points to the line plot
labs(title = "Appearance of Top Song Producers Over the Years",
x = "Year", y = "Number of Songs Produced") +
theme_minimal() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))  # Nice axis breaks
# Display the plot
print(lineplot)
library(ggplot2)
library(dplyr)
library(lubridate)  # Saw online that this can help to handle dates so I don't have to do it manually
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
taylorswift <- taylorswift %>%
mutate(song_producers = strsplit(as.character(song_producers), ",")) %>%
unnest(song_producers) %>%
mutate(song_producers = gsub("[[:punct:]]", "", song_producers),
song_producers = trimws(song_producers),
year = year(ymd(song_release_date)))  # Extract year from the release date using lubridate
top_producers <- taylorswift %>%
group_by(song_producers) %>%
summarize(total_songs = n(), .groups = 'drop') %>%
top_n(10, total_songs) %>%
pull(song_producers)
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
group_by(year, song_producers) %>%
summarize(songs_per_year = n(), .groups = 'drop')
lineplot <- ggplot(filtered_data, aes(x = year, y = songs_per_year, color = song_producers, group = song_producers)) +
geom_line() +  # Use geom_line() for line plots
geom_point() +  # Add points to the line plot
labs(title = "Appearance of Top Song Producers Over the Years",
x = "Year", y = "Number of Songs Produced", colour="Producer") +
theme_minimal() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
# Display the plot
print(lineplot)
library(ggplot2)
library(dplyr)
library(lubridate)  # Saw online that this can help to handle dates so I don't have to do it manually
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
taylorswift <- taylorswift %>%
mutate(song_producers = strsplit(as.character(song_producers), ",")) %>%
unnest(song_producers) %>%
mutate(song_producers = gsub("[[:punct:]]", "", song_producers),
song_producers = trimws(song_producers),
year = year(ymd(song_release_date)))  # Extract year from the release date using lubridate
top_producers <- taylorswift %>%
group_by(song_producers) %>%
summarize(total_songs = n(), .groups = 'drop') %>%
top_n(10, total_songs) %>%
pull(song_producers)
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
group_by(year, song_producers) %>%
summarize(songs_per_year = n(), .groups = 'drop')
lineplot <- ggplot(filtered_data, aes(x = year, y = songs_per_year, color = song_producers, group = song_producers)) +
geom_line() +  # Use geom_line() for line plots
geom_point() +  # Add points to the line plot
labs(title = "Appearance of Song Producers Over Time",
x = "Year", y = "Number of Songs Produced", colour="Producer") +
theme_minimal() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
# Display the plot
print(lineplot)
library(ggplot2)
library(dplyr)
library(lubridate)  # Saw online that this can help to handle dates so I don't have to do it manually
taylorswift <- read.csv("taylorswift.csv")  # Adjust path as needed
taylorswift <- taylorswift %>%
mutate(song_producers = strsplit(as.character(song_producers), ",")) %>%
unnest(song_producers) %>%
mutate(song_producers = gsub("[[:punct:]]", "", song_producers),
song_producers = trimws(song_producers),
year = year(ymd(song_release_date)))  # Extract year from the release date using lubridate
top_producers <- taylorswift %>%
group_by(song_producers) %>%
summarize(total_songs = n(), .groups = 'drop') %>%
top_n(10, total_songs) %>%
pull(song_producers)
filtered_data <- taylorswift %>%
filter(song_producers %in% top_producers) %>%
group_by(year, song_producers) %>%
summarize(songs_per_year = n(), .groups = 'drop')
lineplot <- ggplot(filtered_data, aes(x = year, y = songs_per_year, color = song_producers, group = song_producers)) +
geom_line() +
geom_point() +
labs(title = "Appearance of Song Producers Over Time",
x = "Year", y = "Number of Songs Produced", colour="Producer") +
theme_minimal() +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
# Display the plot
print(lineplot)
runApp('shinyapp5')
img(src="william.png", height="100%", width="100%", align = "center")
img(src="william.png", height="100%", width="100%", align = "center")
runApp('shinyapp5')
shiny::runApp('shinyapp5')
runApp('shinyapp5')
runApp('shinyapp5')
?plotly
knitr::opts_chunk$set(echo = TRUE)
<style>
knitr::opts_chunk$set(echo = TRUE)
